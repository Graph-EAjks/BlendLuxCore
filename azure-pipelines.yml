# Azure build pipeline script
# Add steps that build, run tests, deploy, and more: https://aka.ms/yaml

# This script processes daily and official releases (alpha/beta/RC and final)
# To trigger an official release, add a commit tagged in the form "blendluxcore_v*"
# The "version_string" after the "_" in the tag is used in following steps
# to generate binary names like "blendluxcore-<version_string>-<platform>-..."
# One, and only one, tag in the form "blendluxcore_v*" is needed, 
# otherwise the official release build aborts.

trigger:
  branches:
    include:
    - '*'                # This includes all branches for general builds
    - 'for_blender_4.2'  # This includes the 'for_blender_4.2' branch to trigger builds
  tags:
    include:
    - 'blendluxcore_v*'

jobs:
# Job to detect build type (daily, alpha, beta, pre-release, or final)
- job: DetectBuildType
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'env | sort'
    displayName: Print environment variables
  - script: ./scripts/azurepipeline/detect-release-type.sh
    displayName: Detecting release type (daily, alpha, beta, or final)
    name: setvarStep
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: BlendLuxCore
    displayName: 'Upload github_release_title'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')

# Job to package BlendLuxCore for Linux
- job: BlendLuxCoreLinux
  dependsOn: DetectBuildType
  condition: succeeded()
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    version_string: $[ dependencies.DetectBuildType.outputs['setvarStep.version_string'] ]
  steps:
  - script: ./scripts/azurepipeline/deps-setup.sh
    displayName: Setting up deps
  - script: ./scripts/azurepipeline/package.sh
    displayName: Packaging BlendLuxCore add-on
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: BlendLuxCore
    displayName: 'Upload BlendLuxCore packages'
    condition: eq(variables['System.PullRequest.IsFork'], 'False')

# Job to delete the 'latest' tag for updating with the current commit
- job: DeleteLatestTag
  dependsOn:
  - DetectBuildType
  - BlendLuxCoreLinux
  variables:
    version_string: $[ dependencies.DetectBuildType.outputs['setvarStep.version_string'] ]
  condition: |
    and
    (
      eq(variables['System.PullRequest.IsFork'], 'False'),
      or(
        eq(variables['Build.SourceBranchName'], 'master'),
        eq(variables['Build.SourceBranchName'], 'for_blender_4.2')
      ),
      eq(dependencies.DetectBuildType.outputs['setvarStep.version_string'], 'latest'),
      in(dependencies.BlendLuxCoreLinux.result, 'Succeeded', 'SucceededWithIssues')
    )
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: InstallSSHKey@0
    inputs:
      hostName: github.com
      sshPublicKey: $(PubKey)
      sshKeySecureFile: luxcore_id_rsa
  - script: ./scripts/azurepipeline/delete-latest-tag.sh
    displayName: Deleting tag to update latest build

# Job to publish GitHub release with pre-release flag for the 'for_blender_4.2' branch
- job: PublishGitHubRelease
  dependsOn: BlendLuxCoreLinux
  condition: |
    and(
      eq(variables['Build.SourceBranchName'], 'for_blender_4.2'),
      eq(dependencies.DetectBuildType.outputs['setvarStep.version_string'], 'pre-release')
    )
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: GitHubRelease@0
    inputs:
      connection: 'GitHubConnection'  # Configure your GitHub connection
      repositoryName: 'BlendLuxCore'  # Replace with your repository name
      tag: '$(Build.BuildId)'  # Use the build ID as the tag
      releaseNotes: 'Release notes for the pre-release of BlendLuxCore for Blender 4.2'
      isPreRelease: true  # This marks the release as a pre-release on GitHub
